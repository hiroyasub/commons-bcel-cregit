begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Assertions
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Disabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|jupiter
operator|.
name|api
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * javap input:  *  *<pre>  * javap "src/test/resources/kotlin/test$method name with () in it$1.class"  *</pre>  *  * javap output:  *  *<pre>  * Compiled from "test.kt" final class test$method name with () in it$1 extends kotlin.jvm.internal.Lambda implements kotlin.jvm.functions.Function0<kotlin.Unit> {   public static final test$method name with () in it$1 INSTANCE;   test$method name with () in it$1();   public final void invoke();   public java.lang.Object invoke();   static {};  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|InvalidMethodSigantureTestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|CLASS_NAME
init|=
literal|"test$method name with () in it$1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SRC_TEST_RESOURCES_KOTLIN
init|=
literal|"src/test/resources/kotlin/"
decl_stmt|;
class|class
name|TestVisitor
extends|extends
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|EmptyVisitor
block|{
annotation|@
name|Override
specifier|public
name|void
name|visitField
parameter_list|(
specifier|final
name|Field
name|field
parameter_list|)
block|{
name|field
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadClass
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|SRC_TEST_RESOURCES_KOTLIN
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|URLClassLoader
name|cl
init|=
name|URLClassLoader
operator|.
name|newInstance
argument_list|(
operator|new
name|URL
index|[]
block|{
name|path
operator|.
name|toUri
argument_list|()
operator|.
name|toURL
argument_list|()
block|}
argument_list|)
init|)
block|{
name|Class
operator|.
name|forName
argument_list|(
name|CLASS_NAME
argument_list|,
literal|false
argument_list|,
name|cl
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
comment|//@Disabled("TODO?")
specifier|public
name|void
name|testMethodWithParens
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
specifier|final
name|InputStream
name|inputStream
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|SRC_TEST_RESOURCES_KOTLIN
argument_list|,
name|CLASS_NAME
operator|+
literal|".class"
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|ClassParser
name|classParser
init|=
operator|new
name|ClassParser
argument_list|(
name|inputStream
argument_list|,
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|final
name|JavaClass
name|javaClass
init|=
name|classParser
operator|.
name|parse
argument_list|()
decl_stmt|;
specifier|final
name|TestVisitor
name|visitor
init|=
operator|new
name|TestVisitor
argument_list|()
decl_stmt|;
operator|new
name|DescendingVisitor
argument_list|(
name|javaClass
argument_list|,
name|visitor
argument_list|)
operator|.
name|visit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

