begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * Represents one annotation in the annotation table  *  * @since 6.0  */
end_comment

begin_class
specifier|public
class|class
name|AnnotationEntry
implements|implements
name|Node
block|{
specifier|public
specifier|static
specifier|final
name|AnnotationEntry
index|[]
name|EMPTY_ARRAY
init|=
block|{}
decl_stmt|;
specifier|public
specifier|static
name|AnnotationEntry
index|[]
name|createAnnotationEntries
parameter_list|(
specifier|final
name|Attribute
index|[]
name|attrs
parameter_list|)
block|{
comment|// Find attributes that contain annotation data
return|return
name|Stream
operator|.
name|of
argument_list|(
name|attrs
argument_list|)
operator|.
name|filter
argument_list|(
name|Annotations
operator|.
name|class
operator|::
name|isInstance
argument_list|)
operator|.
name|flatMap
argument_list|(
name|e
lambda|->
name|Stream
operator|.
name|of
argument_list|(
operator|(
operator|(
name|Annotations
operator|)
name|e
operator|)
operator|.
name|getAnnotationEntries
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toArray
argument_list|(
name|AnnotationEntry
index|[]
operator|::
operator|new
argument_list|)
return|;
block|}
comment|/**      * Factory method to create an AnnotionEntry from a DataInput      *      * @param input      * @param constantPool      * @param isRuntimeVisible      * @return the entry      * @throws IOException if an I/O error occurs.      */
specifier|public
specifier|static
name|AnnotationEntry
name|read
parameter_list|(
specifier|final
name|DataInput
name|input
parameter_list|,
specifier|final
name|ConstantPool
name|constantPool
parameter_list|,
specifier|final
name|boolean
name|isRuntimeVisible
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|AnnotationEntry
name|annotationEntry
init|=
operator|new
name|AnnotationEntry
argument_list|(
name|input
operator|.
name|readUnsignedShort
argument_list|()
argument_list|,
name|constantPool
argument_list|,
name|isRuntimeVisible
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numElementValuePairs
init|=
name|input
operator|.
name|readUnsignedShort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numElementValuePairs
condition|;
name|i
operator|++
control|)
block|{
name|annotationEntry
operator|.
name|elementValuePairs
operator|.
name|add
argument_list|(
operator|new
name|ElementValuePair
argument_list|(
name|input
operator|.
name|readUnsignedShort
argument_list|()
argument_list|,
name|ElementValue
operator|.
name|readElementValue
argument_list|(
name|input
argument_list|,
name|constantPool
argument_list|)
argument_list|,
name|constantPool
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|annotationEntry
return|;
block|}
specifier|private
specifier|final
name|int
name|typeIndex
decl_stmt|;
specifier|private
specifier|final
name|ConstantPool
name|constantPool
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isRuntimeVisible
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ElementValuePair
argument_list|>
name|elementValuePairs
decl_stmt|;
specifier|public
name|AnnotationEntry
parameter_list|(
specifier|final
name|int
name|typeIndex
parameter_list|,
specifier|final
name|ConstantPool
name|constantPool
parameter_list|,
specifier|final
name|boolean
name|isRuntimeVisible
parameter_list|)
block|{
name|this
operator|.
name|typeIndex
operator|=
name|typeIndex
expr_stmt|;
name|this
operator|.
name|constantPool
operator|=
name|constantPool
expr_stmt|;
name|this
operator|.
name|isRuntimeVisible
operator|=
name|isRuntimeVisible
expr_stmt|;
name|this
operator|.
name|elementValuePairs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|/**      * Called by objects that are traversing the nodes of the tree implicitly defined by the contents of a Java class.      * I.e., the hierarchy of methods, fields, attributes, etc. spawns a tree of objects.      *      * @param v Visitor object      */
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
specifier|final
name|Visitor
name|v
parameter_list|)
block|{
name|v
operator|.
name|visitAnnotationEntry
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addElementNameValuePair
parameter_list|(
specifier|final
name|ElementValuePair
name|elementNameValuePair
parameter_list|)
block|{
name|elementValuePairs
operator|.
name|add
argument_list|(
name|elementNameValuePair
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|DataOutputStream
name|dos
parameter_list|)
throws|throws
name|IOException
block|{
name|dos
operator|.
name|writeShort
argument_list|(
name|typeIndex
argument_list|)
expr_stmt|;
comment|// u2 index of type name in cpool
name|dos
operator|.
name|writeShort
argument_list|(
name|elementValuePairs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// u2 element_value pair
comment|// count
for|for
control|(
specifier|final
name|ElementValuePair
name|envp
range|:
name|elementValuePairs
control|)
block|{
name|envp
operator|.
name|dump
argument_list|(
name|dos
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @return the annotation type name      */
specifier|public
name|String
name|getAnnotationType
parameter_list|()
block|{
return|return
name|constantPool
operator|.
name|getConstantUtf8
argument_list|(
name|typeIndex
argument_list|)
operator|.
name|getBytes
argument_list|()
return|;
block|}
comment|/**      * @return the annotation type index      */
specifier|public
name|int
name|getAnnotationTypeIndex
parameter_list|()
block|{
return|return
name|typeIndex
return|;
block|}
specifier|public
name|ConstantPool
name|getConstantPool
parameter_list|()
block|{
return|return
name|constantPool
return|;
block|}
comment|/**      * @return the element value pairs in this annotation entry      */
specifier|public
name|ElementValuePair
index|[]
name|getElementValuePairs
parameter_list|()
block|{
comment|// TODO return List
return|return
name|elementValuePairs
operator|.
name|toArray
argument_list|(
name|ElementValuePair
operator|.
name|EMPTY_ARRAY
argument_list|)
return|;
block|}
comment|/**      * @return the number of element value pairs in this annotation entry      */
specifier|public
specifier|final
name|int
name|getNumElementValuePairs
parameter_list|()
block|{
return|return
name|elementValuePairs
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getTypeIndex
parameter_list|()
block|{
return|return
name|typeIndex
return|;
block|}
specifier|public
name|boolean
name|isRuntimeVisible
parameter_list|()
block|{
return|return
name|isRuntimeVisible
return|;
block|}
specifier|public
name|String
name|toShortString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|getAnnotationType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ElementValuePair
index|[]
name|evPairs
init|=
name|getElementValuePairs
argument_list|()
decl_stmt|;
if|if
condition|(
name|evPairs
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ElementValuePair
name|element
range|:
name|evPairs
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|element
operator|.
name|toShortString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
comment|// remove last ", "
name|result
operator|.
name|setLength
argument_list|(
name|result
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toShortString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

