begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  *  Unless required by applicable law or agreed to in writing, software  *  distributed under the License is distributed on an "AS IS" BASIS,  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  See the License for the specific language governing permissions and  *  limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|JavaClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Utility
import|;
end_import

begin_comment
comment|/**  * Loads class files from the CLASSPATH. Inspired by sun.tools.ClassPath.  */
end_comment

begin_class
specifier|public
class|class
name|ClassPath
implements|implements
name|Closeable
block|{
specifier|private
specifier|abstract
specifier|static
class|class
name|AbstractPathEntry
implements|implements
name|Closeable
block|{
specifier|abstract
name|ClassFile
name|getClassFile
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|suffix
parameter_list|)
function_decl|;
specifier|abstract
name|URL
name|getResource
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
specifier|abstract
name|InputStream
name|getResourceAsStream
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|abstract
specifier|static
class|class
name|AbstractZip
extends|extends
name|AbstractPathEntry
block|{
specifier|private
specifier|final
name|ZipFile
name|zipFile
decl_stmt|;
name|AbstractZip
parameter_list|(
specifier|final
name|ZipFile
name|zipFile
parameter_list|)
block|{
name|this
operator|.
name|zipFile
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|zipFile
argument_list|,
literal|"zipFile"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|zipFile
operator|!=
literal|null
condition|)
block|{
name|zipFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|ClassFile
name|getClassFile
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
block|{
specifier|final
name|ZipEntry
name|entry
init|=
name|zipFile
operator|.
name|getEntry
argument_list|(
name|toEntryName
argument_list|(
name|name
argument_list|,
name|suffix
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ClassFile
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getBase
parameter_list|()
block|{
return|return
name|zipFile
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|zipFile
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|entry
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getSize
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getTime
argument_list|()
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
name|URL
name|getResource
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|ZipEntry
name|entry
init|=
name|zipFile
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|entry
operator|!=
literal|null
condition|?
operator|new
name|URL
argument_list|(
literal|"jar:file:"
operator|+
name|zipFile
operator|.
name|getName
argument_list|()
operator|+
literal|"!/"
operator|+
name|name
argument_list|)
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
name|InputStream
name|getResourceAsStream
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|ZipEntry
name|entry
init|=
name|zipFile
operator|.
name|getEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|entry
operator|!=
literal|null
condition|?
name|zipFile
operator|.
name|getInputStream
argument_list|(
name|entry
argument_list|)
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
specifier|abstract
name|String
name|toEntryName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|zipFile
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
comment|/**      * Contains information about file/ZIP entry of the Java class.      */
specifier|public
interface|interface
name|ClassFile
block|{
comment|/**          * @return base path of found class, i.e. class is contained relative to that path, which may either denote a directory,          *         or ZIP file          */
name|String
name|getBase
parameter_list|()
function_decl|;
comment|/**          * @return input stream for class file.          * @throws IOException if an I/O error occurs.          */
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**          * @return canonical path to class file.          */
name|String
name|getPath
parameter_list|()
function_decl|;
comment|/**          * @return size of class file.          */
name|long
name|getSize
parameter_list|()
function_decl|;
comment|/**          * @return modification time of class file.          */
name|long
name|getTime
parameter_list|()
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|Dir
extends|extends
name|AbstractPathEntry
block|{
specifier|private
specifier|final
name|String
name|dir
decl_stmt|;
name|Dir
parameter_list|(
specifier|final
name|String
name|d
parameter_list|)
block|{
name|dir
operator|=
name|d
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Nothing to do
block|}
annotation|@
name|Override
name|ClassFile
name|getClassFile
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
block|{
specifier|final
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|name
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
operator|+
name|suffix
argument_list|)
decl_stmt|;
return|return
name|file
operator|.
name|exists
argument_list|()
condition|?
operator|new
name|ClassFile
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getBase
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
try|try
block|{
return|return
name|file
operator|.
name|getCanonicalPath
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|file
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTime
parameter_list|()
block|{
return|return
name|file
operator|.
name|lastModified
argument_list|()
return|;
block|}
block|}
else|:
literal|null
return|;
block|}
annotation|@
name|Override
name|URL
name|getResource
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
comment|// Resource specification uses '/' whatever the platform
specifier|final
name|File
name|file
init|=
name|toFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|file
operator|.
name|exists
argument_list|()
condition|?
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toURL
argument_list|()
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
name|InputStream
name|getResourceAsStream
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
comment|// Resource specification uses '/' whatever the platform
specifier|final
name|File
name|file
init|=
name|toFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|file
operator|.
name|exists
argument_list|()
condition|?
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|File
name|toFile
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|dir
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|name
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|dir
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Jar
extends|extends
name|AbstractZip
block|{
name|Jar
parameter_list|(
specifier|final
name|ZipFile
name|zip
parameter_list|)
block|{
name|super
argument_list|(
name|zip
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|toEntryName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
block|{
return|return
name|Utility
operator|.
name|packageToPath
argument_list|(
name|name
argument_list|)
operator|+
name|suffix
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|JrtModule
extends|extends
name|AbstractPathEntry
block|{
specifier|private
specifier|final
name|Path
name|modulePath
decl_stmt|;
specifier|public
name|JrtModule
parameter_list|(
specifier|final
name|Path
name|modulePath
parameter_list|)
block|{
name|this
operator|.
name|modulePath
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|modulePath
argument_list|,
literal|"modulePath"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Nothing to do.
block|}
annotation|@
name|Override
name|ClassFile
name|getClassFile
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
block|{
specifier|final
name|Path
name|resolved
init|=
name|modulePath
operator|.
name|resolve
argument_list|(
name|Utility
operator|.
name|packageToPath
argument_list|(
name|name
argument_list|)
operator|+
name|suffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|resolved
argument_list|)
condition|)
block|{
return|return
operator|new
name|ClassFile
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getBase
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|toString
argument_list|(
name|resolved
operator|.
name|getFileName
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Files
operator|.
name|newInputStream
argument_list|(
name|resolved
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|resolved
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getSize
parameter_list|()
block|{
try|try
block|{
return|return
name|Files
operator|.
name|size
argument_list|(
name|resolved
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|getTime
parameter_list|()
block|{
try|try
block|{
return|return
name|Files
operator|.
name|getLastModifiedTime
argument_list|(
name|resolved
argument_list|)
operator|.
name|toMillis
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
block|}
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|URL
name|getResource
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Path
name|resovled
init|=
name|modulePath
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|Files
operator|.
name|exists
argument_list|(
name|resovled
argument_list|)
condition|?
operator|new
name|URL
argument_list|(
literal|"jrt:"
operator|+
name|modulePath
operator|+
literal|"/"
operator|+
name|name
argument_list|)
else|:
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedURLException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
name|InputStream
name|getResourceAsStream
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|Files
operator|.
name|newInputStream
argument_list|(
name|modulePath
operator|.
name|resolve
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|modulePath
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|JrtModules
extends|extends
name|AbstractPathEntry
block|{
specifier|private
specifier|final
name|ModularRuntimeImage
name|modularRuntimeImage
decl_stmt|;
specifier|private
specifier|final
name|JrtModule
index|[]
name|modules
decl_stmt|;
specifier|public
name|JrtModules
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|modularRuntimeImage
operator|=
operator|new
name|ModularRuntimeImage
argument_list|()
expr_stmt|;
name|this
operator|.
name|modules
operator|=
name|modularRuntimeImage
operator|.
name|list
argument_list|(
name|path
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|JrtModule
operator|::
operator|new
argument_list|)
operator|.
name|toArray
argument_list|(
name|JrtModule
index|[]
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|modules
operator|!=
literal|null
condition|)
block|{
comment|// don't use a for each loop to avoid creating an iterator for the GC to collect.
for|for
control|(
specifier|final
name|JrtModule
name|module
range|:
name|modules
control|)
block|{
name|module
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|modularRuntimeImage
operator|!=
literal|null
condition|)
block|{
name|modularRuntimeImage
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|ClassFile
name|getClassFile
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
block|{
comment|// don't use a for each loop to avoid creating an iterator for the GC to collect.
for|for
control|(
specifier|final
name|JrtModule
name|module
range|:
name|modules
control|)
block|{
specifier|final
name|ClassFile
name|classFile
init|=
name|module
operator|.
name|getClassFile
argument_list|(
name|name
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|classFile
operator|!=
literal|null
condition|)
block|{
return|return
name|classFile
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|URL
name|getResource
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
comment|// don't use a for each loop to avoid creating an iterator for the GC to collect.
for|for
control|(
specifier|final
name|JrtModule
name|module
range|:
name|modules
control|)
block|{
specifier|final
name|URL
name|url
init|=
name|module
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
name|InputStream
name|getResourceAsStream
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
comment|// don't use a for each loop to avoid creating an iterator for the GC to collect.
for|for
control|(
specifier|final
name|JrtModule
name|module
range|:
name|modules
control|)
block|{
specifier|final
name|InputStream
name|inputStream
init|=
name|module
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
return|return
name|inputStream
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|toString
argument_list|(
name|modules
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|Module
extends|extends
name|AbstractZip
block|{
name|Module
parameter_list|(
specifier|final
name|ZipFile
name|zip
parameter_list|)
block|{
name|super
argument_list|(
name|zip
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|toEntryName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
block|{
return|return
literal|"classes/"
operator|+
name|Utility
operator|.
name|packageToPath
argument_list|(
name|name
argument_list|)
operator|+
name|suffix
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|FilenameFilter
name|ARCHIVE_FILTER
init|=
parameter_list|(
name|dir
parameter_list|,
name|name
parameter_list|)
lambda|->
block|{
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
expr_stmt|;
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
operator|||
name|name
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
return|;
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FilenameFilter
name|MODULES_FILTER
init|=
parameter_list|(
name|dir
parameter_list|,
name|name
parameter_list|)
lambda|->
block|{
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
expr_stmt|;
return|return
name|name
operator|.
name|endsWith
argument_list|(
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Module
operator|.
name|EXTENSION
argument_list|)
return|;
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|ClassPath
name|SYSTEM_CLASS_PATH
init|=
operator|new
name|ClassPath
argument_list|(
name|getClassPath
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|void
name|addJdkModules
parameter_list|(
specifier|final
name|String
name|javaHome
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
name|String
name|modulesPath
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.modules.path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|modulesPath
operator|==
literal|null
operator|||
name|modulesPath
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Default to looking in JAVA_HOME/jmods
name|modulesPath
operator|=
name|javaHome
operator|+
name|File
operator|.
name|separator
operator|+
literal|"jmods"
expr_stmt|;
block|}
specifier|final
name|File
name|modulesDir
init|=
operator|new
name|File
argument_list|(
name|modulesPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|modulesDir
operator|.
name|exists
argument_list|()
condition|)
block|{
specifier|final
name|String
index|[]
name|modules
init|=
name|modulesDir
operator|.
name|list
argument_list|(
name|MODULES_FILTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|modules
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|module
range|:
name|modules
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|modulesDir
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|module
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Checks for class path components in the following properties: "java.class.path", "sun.boot.class.path",      * "java.ext.dirs"      *      * @return class path as used by default by BCEL      */
comment|// @since 6.0 no longer final
specifier|public
specifier|static
name|String
name|getClassPath
parameter_list|()
block|{
specifier|final
name|String
name|classPathProp
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.class.path"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|bootClassPathProp
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"sun.boot.class.path"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|extDirs
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.ext.dirs"
argument_list|)
decl_stmt|;
comment|// System.out.println("java.version = " + System.getProperty("java.version"));
comment|// System.out.println("java.class.path = " + classPathProp);
comment|// System.out.println("sun.boot.class.path=" + bootClassPathProp);
comment|// System.out.println("java.ext.dirs=" + extDirs);
specifier|final
name|String
name|javaHome
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Starting in JRE 9, .class files are in the modules directory. Add them to the path.
specifier|final
name|Path
name|modulesPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|javaHome
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"lib/modules"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|modulesPath
argument_list|)
operator|&&
name|Files
operator|.
name|isRegularFile
argument_list|(
name|modulesPath
argument_list|)
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|modulesPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Starting in JDK 9, .class files are in the jmods directory. Add them to the path.
name|addJdkModules
argument_list|(
name|javaHome
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|getPathComponents
argument_list|(
name|classPathProp
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|getPathComponents
argument_list|(
name|bootClassPathProp
argument_list|,
name|list
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|dirs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|getPathComponents
argument_list|(
name|extDirs
argument_list|,
name|dirs
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|d
range|:
name|dirs
control|)
block|{
specifier|final
name|File
name|extDir
init|=
operator|new
name|File
argument_list|(
name|d
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|extensions
init|=
name|extDir
operator|.
name|list
argument_list|(
name|ARCHIVE_FILTER
argument_list|)
decl_stmt|;
if|if
condition|(
name|extensions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|extension
range|:
name|extensions
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|extDir
operator|.
name|getPath
argument_list|()
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|extension
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|list
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
name|File
operator|.
name|pathSeparator
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|getPathComponents
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
specifier|final
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|path
argument_list|,
name|File
operator|.
name|pathSeparator
argument_list|)
decl_stmt|;
while|while
condition|(
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
specifier|final
name|String
name|name
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
specifier|final
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|final
name|String
name|classPathString
decl_stmt|;
specifier|private
specifier|final
name|ClassPath
name|parent
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|AbstractPathEntry
argument_list|>
name|paths
decl_stmt|;
comment|/**      * Search for classes in CLASSPATH.      *      * @deprecated Use SYSTEM_CLASS_PATH constant      */
annotation|@
name|Deprecated
specifier|public
name|ClassPath
parameter_list|()
block|{
name|this
argument_list|(
name|getClassPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
specifier|public
name|ClassPath
parameter_list|(
specifier|final
name|ClassPath
name|parent
parameter_list|,
specifier|final
name|String
name|classPathString
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|classPathString
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|classPathString
argument_list|,
literal|"classPathString"
argument_list|)
expr_stmt|;
name|this
operator|.
name|paths
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|StringTokenizer
name|tokenizer
init|=
operator|new
name|StringTokenizer
argument_list|(
name|classPathString
argument_list|,
name|File
operator|.
name|pathSeparator
argument_list|)
init|;
name|tokenizer
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|path
init|=
name|tokenizer
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Dir
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
name|org
operator|.
name|apache
operator|.
name|bcel
operator|.
name|classfile
operator|.
name|Module
operator|.
name|EXTENSION
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Module
argument_list|(
operator|new
name|ZipFile
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
name|ModularRuntimeImage
operator|.
name|MODULES_PATH
argument_list|)
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
operator|new
name|JrtModules
argument_list|(
name|ModularRuntimeImage
operator|.
name|MODULES_PATH
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paths
operator|.
name|add
argument_list|(
operator|new
name|Jar
argument_list|(
operator|new
name|ZipFile
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
operator|||
name|path
operator|.
name|endsWith
argument_list|(
literal|".jar"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"CLASSPATH component "
operator|+
name|file
operator|+
literal|": "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Search for classes in given path.      *      * @param classPath      */
specifier|public
name|ClassPath
parameter_list|(
specifier|final
name|String
name|classPath
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|classPath
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
specifier|final
name|AbstractPathEntry
name|path
range|:
name|paths
control|)
block|{
name|path
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ClassPath
name|other
init|=
operator|(
name|ClassPath
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|classPathString
argument_list|,
name|other
operator|.
name|classPathString
argument_list|)
return|;
block|}
comment|/**      * @param name fully qualified file name, e.g. java/lang/String      * @return byte array for class      * @throws IOException if an I/O error occurs.      */
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getBytes
argument_list|(
name|name
argument_list|,
name|JavaClass
operator|.
name|EXTENSION
argument_list|)
return|;
block|}
comment|/**      * @param name fully qualified file name, e.g. java/lang/String      * @param suffix file name ends with suffix, e.g. .java      * @return byte array for file on class path      * @throws IOException if an I/O error occurs.      */
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInputStream
name|dis
init|=
literal|null
decl_stmt|;
try|try
init|(
name|InputStream
name|inputStream
init|=
name|getInputStream
argument_list|(
name|name
argument_list|,
name|suffix
argument_list|)
init|)
block|{
if|if
condition|(
name|inputStream
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't find: "
operator|+
name|name
operator|+
name|suffix
argument_list|)
throw|;
block|}
name|dis
operator|=
operator|new
name|DataInputStream
argument_list|(
name|inputStream
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|inputStream
operator|.
name|available
argument_list|()
index|]
decl_stmt|;
name|dis
operator|.
name|readFully
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|dis
operator|!=
literal|null
condition|)
block|{
name|dis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @param name fully qualified class name, e.g. java.lang.String      * @return input stream for class      * @throws IOException if an I/O error occurs.      */
specifier|public
name|ClassFile
name|getClassFile
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getClassFile
argument_list|(
name|name
argument_list|,
name|JavaClass
operator|.
name|EXTENSION
argument_list|)
return|;
block|}
comment|/**      * @param name fully qualified file name, e.g. java/lang/String      * @param suffix file name ends with suff, e.g. .java      * @return class file for the java class      * @throws IOException if an I/O error occurs.      */
specifier|public
name|ClassFile
name|getClassFile
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
name|ClassFile
name|cf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|cf
operator|=
name|parent
operator|.
name|getClassFileInternal
argument_list|(
name|name
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cf
operator|==
literal|null
condition|)
block|{
name|cf
operator|=
name|getClassFileInternal
argument_list|(
name|name
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cf
operator|!=
literal|null
condition|)
block|{
return|return
name|cf
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't find: "
operator|+
name|name
operator|+
name|suffix
argument_list|)
throw|;
block|}
specifier|private
name|ClassFile
name|getClassFileInternal
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
block|{
for|for
control|(
specifier|final
name|AbstractPathEntry
name|path
range|:
name|paths
control|)
block|{
specifier|final
name|ClassFile
name|cf
init|=
name|path
operator|.
name|getClassFile
argument_list|(
name|name
argument_list|,
name|suffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|cf
operator|!=
literal|null
condition|)
block|{
return|return
name|cf
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Gets an InputStream.      *<p>      * The caller is responsible for closing the InputStream.      *</p>      * @param name fully qualified class name, e.g. java.lang.String      * @return input stream for class      * @throws IOException if an I/O error occurs.      */
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getInputStream
argument_list|(
name|Utility
operator|.
name|packageToPath
argument_list|(
name|name
argument_list|)
argument_list|,
name|JavaClass
operator|.
name|EXTENSION
argument_list|)
return|;
block|}
comment|/**      * Gets an InputStream for a class or resource on the classpath.      *<p>      * The caller is responsible for closing the InputStream.      *</p>      *      * @param name   fully qualified file name, e.g. java/lang/String      * @param suffix file name ends with suff, e.g. .java      * @return input stream for file on class path      * @throws IOException if an I/O error occurs.      */
specifier|public
name|InputStream
name|getInputStream
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|java
operator|.
name|lang
operator|.
name|ClassLoader
name|classLoader
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
comment|// closed by caller
specifier|final
name|InputStream
name|inputStream
init|=
name|classLoader
operator|==
literal|null
condition|?
literal|null
else|:
name|classLoader
operator|.
name|getResourceAsStream
argument_list|(
name|name
operator|+
name|suffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
return|return
name|inputStream
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|ignored
parameter_list|)
block|{
comment|// ignored
block|}
return|return
name|getClassFile
argument_list|(
name|name
argument_list|,
name|suffix
argument_list|)
operator|.
name|getInputStream
argument_list|()
return|;
block|}
comment|/**      * @param name name of file to search for, e.g. java/lang/String.java      * @return full (canonical) path for file      * @throws IOException if an I/O error occurs.      */
specifier|public
name|String
name|getPath
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|index
init|=
name|name
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|suffix
operator|=
name|name
operator|.
name|substring
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|getPath
argument_list|(
name|name
argument_list|,
name|suffix
argument_list|)
return|;
block|}
comment|/**      * @param name name of file to search for, e.g. java/lang/String      * @param suffix file name suffix, e.g. .java      * @return full (canonical) path for file, if it exists      * @throws IOException if an I/O error occurs.      */
specifier|public
name|String
name|getPath
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|suffix
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getClassFile
argument_list|(
name|name
argument_list|,
name|suffix
argument_list|)
operator|.
name|getPath
argument_list|()
return|;
block|}
comment|/**      * @param name fully qualified resource name, e.g. java/lang/String.class      * @return URL supplying the resource, or null if no resource with that name.      * @since 6.0      */
specifier|public
name|URL
name|getResource
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
for|for
control|(
specifier|final
name|AbstractPathEntry
name|path
range|:
name|paths
control|)
block|{
name|URL
name|url
decl_stmt|;
if|if
condition|(
operator|(
name|url
operator|=
name|path
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|url
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param name fully qualified resource name, e.g. java/lang/String.class      * @return InputStream supplying the resource, or null if no resource with that name.      * @since 6.0      */
specifier|public
name|InputStream
name|getResourceAsStream
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
for|for
control|(
specifier|final
name|AbstractPathEntry
name|path
range|:
name|paths
control|)
block|{
name|InputStream
name|is
decl_stmt|;
if|if
condition|(
operator|(
name|is
operator|=
name|path
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
return|return
name|is
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param name fully qualified resource name, e.g. java/lang/String.class      * @return An Enumeration of URLs supplying the resource, or an empty Enumeration if no resource with that name.      * @since 6.0      */
specifier|public
name|Enumeration
argument_list|<
name|URL
argument_list|>
name|getResources
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|Vector
argument_list|<
name|URL
argument_list|>
name|results
init|=
operator|new
name|Vector
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|AbstractPathEntry
name|path
range|:
name|paths
control|)
block|{
name|URL
name|url
decl_stmt|;
if|if
condition|(
operator|(
name|url
operator|=
name|path
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
operator|.
name|elements
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|classPathString
operator|.
name|hashCode
argument_list|()
return|;
block|}
comment|/**      * @return used class path string      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
name|parent
operator|+
name|File
operator|.
name|pathSeparator
operator|+
name|classPathString
return|;
block|}
return|return
name|classPathString
return|;
block|}
block|}
end_class

end_unit

